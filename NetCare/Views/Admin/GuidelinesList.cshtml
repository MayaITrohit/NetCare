@model NetCare.Models.GuidelineManagement
@{
    ViewBag.Title = "Guidelines";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .my-input-class {
        padding: 3px 6px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .my-confirm-class {
        padding: 3px 6px;
        font-size: 12px;
        color: white;
        text-align: center;
        vertical-align: middle;
        border-radius: 4px;
        background-color: #337ab7;
        text-decoration: none;
    }

    .my-cancel-class {
        padding: 3px 6px;
        font-size: 12px;
        color: white;
        text-align: center;
        vertical-align: middle;
        border-radius: 4px;
        background-color: #a94442;
        text-decoration: none;
    }

    .error {
        border: solid 1px;
        border-color: #a94442;
    }

    .destroy-button {
        padding: 5px 10px 5px 10px;
        border: 1px blue solid;
        background-color: lightgray;
    }
</style>
@using (Html.BeginForm("GuidelinesList", "Admin", FormMethod.Post))
{
    <section class="content">
        <div class="row">
            <div class="col-xs-12">
                <div class="box">
                    <div class="box-header view-list bus">
                        <div class="info-page">
                            <h3 class="box-title">Guidelines Information</h3>
                        </div>
                        <div class="box-tools search-box">
                            @*<div class="btn btn-info btn-all">
                                    @Html.ActionLink("Add Guidelines", "GuidelinesSave")
                                </div>*@
                        </div>
                    </div>
                    @if (TempData["Message"] != null)
                    {
                        <div class="alert alert-success" style="float: none;" role="alert">
                            <b>@TempData["Message"]</b>
                        </div>
                    }
                    @if (TempData["DeleteMessage"] != null)
                    {
                        <div class="alert alert-danger" style="float: none;" role="alert">
                            <b>@TempData["DeleteMessage"]</b>
                        </div>
                    }
                    @if (TempData["Alert"] != null)
                    {
                        <div class="alert alert-danger" style="float: none;" role="alert">
                            <b>@TempData["Alert"]</b>
                        </div>
                    }

                    <div class="box-body table-responsive no-padding VIEW-LIST">
                        <button type="button" id="btnAddGuidline" class="btn btn-info btn-all pull-left"><i class="fa fa-fw fa-plus"></i></button>
                        <table id="grid" data-source="@Url.Action("GetGuidelines")"></table>


                        @*<table id="myAdvancedTable" class="table table-hover">
                                <thead>
                                    <tr class="main-tr">
                                        <th class="main-th">Guideline Name</th>
                                        <th class="main-th">Guideline Link</th>
                                        <th class="main-th">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model != null)
                                    {
                                        foreach (var item in Model)
                                        {
                                            <tr>
                                                <td>@Html.DisplayFor(modelItem => item.GuidelineName)</td>
                                                <td>@Html.DisplayFor(modelItem => item.GuidelineLink)</td>
                                                <td>
                                                    @Html.ActionLink("Edit Guideline", "GuidelinesUpdate", new { id = item.ID }) |
                                                    @Html.ActionLink("Delete Guideline", "GuidelinesDelete", new { id = item.ID }, new { onclick = "return confirm('Are you sure you wish to Delete Guideline ?');" })
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>*@

                        <div class="modal fade" id="guidlinesmodel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                            <div class="modal-dialog full-width">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                        <h4 class="modal-title" id="myModalLabel">Guidlines</h4>
                                    </div>
                                    <div class="modal-body">
                                        <input type="hidden" id="Id" />
                                        <div class="form-group col-sm-6 col-md-6 col-lg-6">
                                            <label>Guideline Name</label>
                                            @Html.EditorFor(model => model.GuidelineName, new { htmlAttributes = new { @class = "form-control", @maxlength = "50 " } })
                                            @Html.ValidationMessageFor(model => model.GuidelineName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="form-group col-sm-6 col-md-6 col-lg-6">
                                            <label>Guideline Link</label>
                                            @Html.EditorFor(model => model.GuidelineLink, new { htmlAttributes = new { @class = "form-control", @maxlength = "50 ", @Value = "http://" } })
                                            @Html.ValidationMessageFor(model => model.GuidelineLink, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                        <button type="button" id="btnSave" disabled="disabled" class="btn btn-primary">Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/gridcss")
    @Scripts.Render("~/bundles/grid")
    <script src="http://formvalidation.io/vendor/formvalidation/js/formValidation.min.js"></script>
    <script src="http://formvalidation.io/vendor/formvalidation/js/framework/bootstrap.min.js"></script>

    <script>
        $(document).ready(function(){
            $('[data-toggle="popover"]').popover();
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#customermodel').formValidation({
                framework: 'bootstrap',
                icon: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    GuidelineName: {
                        validators: {
                            notEmpty: {
                                message: 'The Guideline Name is required'
                            },
                            regexp: {
                                regexp: /^[a-zA-Z ]+$/,
                                message: 'The Guideline Name can only consist of Alphabetical'
                            }
                        }
                    },
                    GuidelineLink: {
                        validators: {
                            notEmpty: {
                                message: 'The Guideline Link is required'
                            },
                            regexp: {
                                regexp: /^[a-zA-Z ]+$/,
                                message: 'The Guideline Link can only consist of Alphabetical'
                            }
                        }
                    }
                }
            });
        });
    </script>

    <script type="text/javascript">
        var grid;

        $("form").keyup(function () {

            Validate();
        });
        function Validate() {
            var allHaveClass = $('form i').hasClass('glyphicon-remove');
            if (allHaveClass) {
                $('#btnSave').attr("disabled", "disabled");
            }
            else {
                $('#btnSave').removeAttr("disabled");
            }
        }

        function Add() {
        debugger
            $("#Id").val("");
            $("#GuidelineName").val("");
            $("#GuidelineLink").val("http://");
            $("#NewsBody").val("");
            $("#guidlinesmodel").modal("show");
        }
        function Edit(e) {

            $("#Id").val(e.data.id);
            $("#GuidelineName").val(e.data.record.GuidelineName);
            $("#GuidelineLink").val(e.data.record.GuidelineLink);
            Validate();
            $("#guidlinesmodel").modal("show");

        }
        function Save() {
            var news = {
                ID: $("#Id").val(),
                GuidelineName: $("#GuidelineName").val(),
                GuidelineLink: $("#GuidelineLink").val(),
            };
            $.ajax({
                url: "/Admin/GuidelinesSave", type: "POST", data: { obj: news }
            })
                .done(function () {
                    grid.reload();
                    $("#success").css("display", "block");
                    $("#guidlinesmodel").modal("hide");
                })
                .fail(function () {
                    alert("Unable to save.");
                    $("#guidlinesmodel").modal("hide");
                });
        }
        function Remove(e) {
            if (confirm("Are you sure you want to delete this News?")) {
                $.ajax({ url: "/Admin/GuidelinesDelete", type: "POST", data: { id: e.data.id } })
                    .done(function () {
                        $("#delete").css("display", "block");
                        grid.reload();
                    })
                    .fail(function () {
                        alert("Unable to remove.");
                    });
            }
            return false;
        }

        function Search() {
            grid.reload({ searchString: $("#search").val() });
        }

        $(document).ready(function () {
            grid = $("#grid").grid({
                dataKey: "ID",
                uiLibrary: "bootstrap",
                columns: [
                    { field: "GuidelineName", title: "Guideline Name", width: 96, sortable: true },
                    { field: "GuidelineLink", title: "Guideline Link", width: 104, sortable: true },
                    { title: "Edit", field: "Edit", width: 34, type: "icon", icon: "glyphicon-pencil", tooltip: "Edit", events: { "click": Edit } },
                    { title: "Delete", field: "Delete", width: 45, type: "icon", icon: "glyphicon glyphicon-remove", tooltip: "Delete", events: { "click": Remove } }
                ],
                pager: { enable: true, limit: 10, sizes: [2, 5, 10, 20] }
            });
            $("#btnAddGuidline").on("click", Add);
            $("#btnSave").on("click", Save);
            $("#search").on("keyup", Search);
        });
    </script>
}
